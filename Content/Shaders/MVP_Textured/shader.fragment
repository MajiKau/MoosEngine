#version 430
struct PointLight
{
   vec3 Color;
   float AmbientIntensity;
   float DiffuseIntensity;
   vec3 Position;
};
struct DirectionalLight
{
   vec3 Color;
   float AmbientIntensity;
   float DiffuseIntensity;
   vec3 Direction;
};
struct Material
{
   vec3 ambient;//TODO: Not used
   vec3 diffuse;//Not used
   vec3 specular;//Not used
   float shininess;
};
layout(location = 4) uniform vec3 gEyeWorldPos;
layout(location = 9) uniform float gMatSpecularIntensity;
layout(location = 10) uniform float gSpecularPower;//Not used, comes from material(shininess)
layout(location = 13) uniform Material material;

layout(location = 17) uniform sampler2D diffuse_texture;
layout(location = 18) uniform sampler2D specular_texture;
layout(location = 28) uniform sampler2D normal_texture;
layout(location = 29) uniform samplerCube skybox;

layout(location = 23) uniform bool blinn;
const int MAX_LIGHTS = 10;
layout(location = 24) uniform int num_lights_p;
layout(location = 25) uniform int num_lights_d;
layout(location = 100) uniform DirectionalLight gDirectionalLight[MAX_LIGHTS];
layout(location = 200) uniform PointLight gPointLight[MAX_LIGHTS];
layout(location = 300) uniform vec3 gPortalOffset = vec3(0.0, 0.0, 0.0);;
in vec3 WorldPos0;
in vec3 Normal0;
in vec3 Tangent0;
in vec3 Bitangent0;
in vec2 tex_coord;
in vec3 FragPos;
out vec4 frag_colour;
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir, mat3 tbnMat)//TODO Attenuation
{
   vec3 lightDir = tbnMat * normalize(-light.Position + WorldPos0 + gPortalOffset); 
   vec3 WorldPos = tbnMat * WorldPos0;
   vec3 LightPos = tbnMat * light.Position + gPortalOffset;
   float constant = 1.0f;//
   float linear = 0.0014f;//
   float quadratic = 0.000007f;//
   float distance = length(LightPos  - WorldPos);//
   float attenuation = 1.0 / (constant + linear * distance + quadratic * (distance * distance));//
   float DiffuseFactor = max(dot(normal, -lightDir), 0.0);
   float SpecularFactor = 0.0;
   if (blinn)
   {
     vec3 halfwayDir = normalize(lightDir + viewDir);
     SpecularFactor = pow(max(dot(normal, -halfwayDir), 0.0), material.shininess); 
   }
   else
   {
     vec3 reflectDir = reflect(-lightDir, normal);
     SpecularFactor = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
   }
   vec3 AmbientColor = (light.Color * light.AmbientIntensity) * vec3(texture2D(diffuse_texture, tex_coord));
   vec3 DiffuseColor = (light.Color * light.DiffuseIntensity)  * DiffuseFactor * vec3(texture2D(diffuse_texture, tex_coord));
   vec3  SpecularColor = (light.Color * gMatSpecularIntensity) * SpecularFactor * vec3(texture2D(specular_texture, tex_coord));
   AmbientColor *= attenuation;
   DiffuseColor *= attenuation;
   SpecularColor *= attenuation;
   return (AmbientColor + DiffuseColor + SpecularColor);
}
vec3 CalcReflection(vec3 normal, vec3 viewDir, mat3 tbnMat)
{
   vec3 I = normalize(WorldPos0 - gEyeWorldPos + gPortalOffset);
   //vec3 R = reflect(I, normalize(Normal0));
   vec3 R = reflect(I, tbnMat*normal);
   R.y = -R.y;
   vec3 ReflectColor = texture(skybox, R).rgb;
   return (ReflectColor * texture2D(specular_texture, tex_coord).r * 0.75);
}
vec3 CalcDirectionalLight(DirectionalLight light, vec3 normal, vec3 viewDir, mat3 tbnMat)
{
   vec3 lightDir = normalize(tbnMat*light.Direction);
   float DiffuseFactor = max(dot(normal, -lightDir), 0.0);
   float SpecularFactor = 0.0;
   if(blinn)
   {
     vec3 halfwayDir = normalize(lightDir + viewDir);
     SpecularFactor = pow(max(dot(normal, -halfwayDir), 0.0), material.shininess); 
   }
   else
   {
     vec3 reflectDir = reflect(-lightDir, normal);
     SpecularFactor = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
   }
   vec3 AmbientColor = (light.Color * light.AmbientIntensity) * vec3(texture2D(diffuse_texture, tex_coord));
   vec3 DiffuseColor = (light.Color * light.DiffuseIntensity)  * DiffuseFactor * vec3(texture2D(diffuse_texture, tex_coord));
   vec3  SpecularColor = (light.Color * gMatSpecularIntensity) * SpecularFactor * vec3(texture2D(specular_texture, tex_coord));
   
   vec3 ReflectColor = CalcReflection(normal, viewDir, tbnMat);
   return (AmbientColor + DiffuseColor + SpecularColor + ReflectColor);
}

void main() {
  vec3 Normal = normalize(Normal0);
  vec3 Tangent = normalize(Tangent0);
  vec3 Bitangent = normalize(Bitangent0); 
  //if(length(Tangent0) == 0)
  //{
  //  Tangent = normalize(Tangent - dot(Tangent, Normal) * Normal);
  //  Bitangent = cross(Normal, Tangent);
  //}
  mat3 TBN = transpose(mat3( Tangent, Bitangent, Normal ));
  //mat3 TBN = transpose(mat3( Bitangent, Tangent, Normal ));
  Normal = normalize(texture2D(normal_texture, tex_coord).rgb*2.0 - 1.0);
  //Normal.r = -Normal.r;
  Normal.g = -Normal.g;
  vec3 VertexToEye = TBN * normalize(-gEyeWorldPos + WorldPos0 + gPortalOffset);
  vec3 result = vec3(0.0,0.0,0.0);
  for (int i = 0; i < num_lights_p; i++)
    result += CalcPointLight(gPointLight[i], Normal, VertexToEye, TBN);
  for (int i = 0; i < num_lights_d; i++)
    result += CalcDirectionalLight(gDirectionalLight[i], Normal, VertexToEye, TBN);
  frag_colour = vec4(result, 1.0);
};